---
import DownloadIcon from "@icons/downloadIcon.astro";
import PlayIcon from "@icons/playIcon.astro";
import PauseIcon from "@icons/pauseIcon.astro";
import AudioIcon from "@icons/audioIcon.astro";
import AudioMutedIcon from "@icons/audioMutedIcon.astro";
---

<div
  id="audio-player-container"
  class="w-full z-20 bottom-0 fixed bg-base-100 px-5 h-16 items-center transition-opacity hidden opacity-0 duration-500"
>
  <audio src="" preload="metadata"></audio>
  <span id="audio-loading" class="loading loading-spinner loading-md min-w-[1.5rem] hidden"></span>
  <label id="audio-control" class="swap hidden">
    <input type="checkbox" id="play-icon" />
    <div id="play-icon-svg" class="swap-off">
      <PlayIcon />
    </div>
    <div id="pause-icon-svg" class="swap-on">
      <PauseIcon />
    </div>
  </label>
  <span id="current-time" class="ml-5 mr-2">0:00</span>/
  <span id="duration" class="ml-2">0:00</span>
  <input id="seek-slider" type="range" min="0" max="0" value="0" class="range range-xs mx-5" />
  <label class="ml-5 swap">
    <input id="mute-icon" type="checkbox" />
    <div class="swap-off">
      <AudioIcon />
    </div>
    <div class="swap-on">
      <AudioMutedIcon />
    </div>
  </label>
  <div class="dropdown dropdown-top dropdown-end ml-5 h-6">
    <button tabindex="0">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="icon icon-tabler icon-tabler-dots-vertical"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        stroke-width="2"
        stroke="currentColor"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <path d="M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"></path>
        <path d="M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"></path>
        <path d="M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"></path>
      </svg>
    </button>
    <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
      <li>
        <a href="#" download id="audio-download-link">
          <DownloadIcon />
          Download</a
        >
      </li>
    </ul>
  </div>
</div>

<script>
  const playIconContainer = document.getElementById("play-icon");
  const muteIconContainer = document.getElementById("mute-icon");
  const audioControl = document.getElementById("audio-control");
  const audioLoading = document.getElementById("audio-loading");
  const audioDownloadLink = document.getElementById("audio-download-link");
  const musicPlayer = document.getElementById("audio-player-container");
  const footer = document.querySelector(".footer > div");

  const audio = document.querySelector("audio");
  const durationContainer = document.getElementById("duration");
  const currentTimeContainer = document.getElementById("current-time");
  const seekSlider = document.getElementById("seek-slider");

  const calculateTime = (secs) => {
    const hours = Math.floor(secs / 3600);
    const minutes = Math.floor((secs % 3600) / 60);
    const seconds = Math.floor(secs % 60);
    const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
    const formattedseconds = seconds < 10 ? `0${seconds}` : seconds;

    return hours > 0 ? `${hours}:${formattedMinutes}:${formattedseconds}` : `${minutes}:${formattedseconds}`;
  };

  const displayDuration = () => {
    durationContainer.textContent = calculateTime(audio.duration);
  };

  if (audio.readyState > 0) {
    displayDuration();
    audioLoading?.classList.add("hidden");
    audioControl?.classList.remove("hidden");
  } else {
    audio.addEventListener("loadedmetadata", () => {
      displayDuration();
      seekSlider?.setAttribute("max", audio.duration);
      audioLoading?.classList.add("hidden");
      audioControl?.classList.remove("hidden");
    });
  }

  muteIconContainer.addEventListener("click", () => {
    audio.muted = muteIconContainer.checked;
  });

  playIconContainer.onchange = function () {
    if (playIconContainer.checked) {
      audio.play();
    } else {
      audio.pause();
    }
  };

  seekSlider.addEventListener("input", () => {
    currentTimeContainer.textContent = calculateTime(seekSlider.value);
  });

  seekSlider.addEventListener("change", () => {
    audio.currentTime = seekSlider.value;
  });

  audio.addEventListener("timeupdate", () => {
    seekSlider.value = Math.floor(audio.currentTime);
    currentTimeContainer.textContent = calculateTime(seekSlider.value);
  });

  const playButtons = document.querySelectorAll(".card-pay-buttons");

  playButtons.forEach(function (btn) {
    btn.addEventListener("click", () => {
      if (!audio.src.includes(btn.dataset.audioUrl)) {
        musicPlayer?.classList.remove("hidden");
        musicPlayer?.classList.add("flex");
        footer?.classList.add("pb-24");
        setTimeout(() => musicPlayer?.classList.remove("opacity-0"), 100);
        audioLoading?.classList.remove("hidden");
        audioControl?.classList.add("hidden");
        durationContainer.textContent = "0:00";
        currentTimeContainer.textContent = "0:00";
        audio.src = btn.dataset.audioUrl;
        audioDownloadLink.href = btn.dataset.audioUrl;
        disableOthersPlayButtons(btn.id, playButtons);
        playIconContainer.checked = true;
        audio.play();
      } else {
        playIconContainer?.click();
      }
    });
  });

  function disableOthersPlayButtons(id, playButtons) {
    playButtons.forEach(function (btn) {
      if (btn.id != id) {
        btn.checked = false;
      }
    });
  }
</script>
